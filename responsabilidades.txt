üë§ Pessoa A ‚Äì Servidor

    Responsabilidades:

        Criar servidor WebSocket em TypeScript.

        Configurar Redis + BullMQ para fila de mensagens.

        Configurar SQLite + Prisma para salvar hist√≥rico e usu√°rios.

        Implementar:

            Login/autentica√ß√£o.

            Receber mensagens, enfileirar e salvar.

            Broadcast para todos os clientes conectados.

            Endpoint para recuperar hist√≥rico ao conectar.

    Entreg√°veis principais:

        server.ts com WebSocket funcionando.

        queue.ts com BullMQ processando mensagens.

        db.ts com Prisma + SQLite configurado.

        Modelo de mensagem e usu√°rio.





üë§ Pessoa B ‚Äì Cliente

    Responsabilidades:

        Criar CLI em Node/TS para o usu√°rio.

        Implementar:

            Tela inicial de login/registro.

            Conex√£o com o servidor via WebSocket.

            Envio/recebimento de mensagens.

            Exibir hist√≥rico no terminal ao logar.

            Interface de texto com cores (chalk).

    Entreg√°veis principais:

        client.ts que conecta no servidor.

        Sistema de input no terminal (readline).

        Sistema b√°sico de comandos (ex: /join #canal, /exit).